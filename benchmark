#! /usr/bin/env python

import sys
import os
import copy

from multirun import *
import FWCore.ParameterSet.Config as cms


if __name__ == "__main__":
  if not 'CMSSW_BASE' in os.environ:
    # FIXME print a meaningful error message
    sys.exit(1)

  if len(sys.argv) < 3:
    # FIXME print a meaningful error message
    sys.exit(1)
  
  config = sys.argv[1]
  threads = int(sys.argv[2])

  # TODO parse arguments and options from the command line
  options = {
    'verbose'             : False,
    'plumbing'            : False,
    'warmup'              : True,
    'events'              : 400,
    'repeats'             : 4,
    'jobs'                : 2,
    'threads'             : threads,                          # per job
    'streams'             : threads,                          # per job
    'gpus_per_job'        : 0,                          # per job
    'allow_hyperthreading': False,                      # this has no effect if set_cpu_affinity is False
    'set_cpu_affinity'    : False,
    'set_gpu_affinity'    : False,
    'logdir'              : 'logs',                     # relative or absolute path, or None to disable storing the logs
    'keep'                : [ 'resources.json' ],       # additional output files to be kept, along with the logs
  }

  info()
  process = parseProcess(config)

  strstr = """
  for config in sys.argv[1:]:
    process = parseProcess(config)

    if run_io_benchmark:
      print 'Benchmarking only I/O'
      io = copy.deepcopy(process)
      io.hltGetRaw = cms.EDAnalyzer("HLTGetRaw", RawDataCollection = cms.InputTag("rawDataCollector"))
      io.path = cms.Path(io.hltGetRaw)
      io.schedule = cms.Schedule(io.path)
      if 'PrescaleService' in io.__dict__:
        del io.PrescaleService
      io_options = copy.deepcopy(options)
      io_options['logdir'] = None
      io_options['keep'] = []
      multiCmsRun(io, **io_options)
      run_io_benchmark = False
      print
  """

  print 'Benchmarking %s' % config
  multiCmsRun(process, **options)
